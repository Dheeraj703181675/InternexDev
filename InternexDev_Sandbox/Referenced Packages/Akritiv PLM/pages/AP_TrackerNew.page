<apex:page standardController="akritivtlm__AP_Tracker__c" extensions="akritivtlm.TrackerNew">
<apex:stylesheet value="{!URLFOR($Resource.akritivtlm__EXT,'/css/ext-all.css')}"/> 
<apex:stylesheet value="{!URLFOR($Resource.akritivtlm__editRec, '/editResource/editstyle.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.akritivtlm__TwitterBootstrap, '/css/custom-style.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.akritivtlm__Jquery, '/Jquery/js/1.7.2/jquery-1.7.2-min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.akritivtlm__EXT, '/js/ext.js')}"/>

<script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
<script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>
<script src="../static/102010/js/picklist.js"></script>

<script>
 var fieldsArr=new Array();
 var fieldsToId = {};
 var allIds = new Array();
 var allUA = new Array();
 
 //get a session id token to use the js libs
sforce.connection.sessionId = "{!$Api.Session_ID}";

//describe the object we are dealing with. You'll need to change this to whatever object you are working with. Use the API name of the object.'
var describeResults = sforce.connection.describeSObject("{!childobjectname}"); // the object we want picklists from 

// function to get the picklist values of a field. Finds all potential options. Simple pass it in a field id. Will return object with data in the values key.
function getPicklistValues(field){
    //create return object 
    var returnObj = new returnObject();
    
    try{
        var validField = false;
        for(var i = 0; i < describeResults.fields.length; i++){
            var fieldList = describeResults.fields[i];
            var fieldName = fieldList.name;
            if(fieldName.toLowerCase() == field.toLowerCase()){
                validField = true;
                for(var j = 0; j < fieldList.picklistValues.length; j++){
                    var newValue = new Object();
                    newValue.label = fieldList.picklistValues[j].label;
                    newValue.value = fieldList.picklistValues[j].value;
                    newValue.default1 = fieldList.picklistValues[j].defaultValue;
                    if(fieldList.picklistValues[j].hasOwnProperty('validFor')){
                        newValue.validFor = fieldList.picklistValues[j].validFor;
                    }
                    
                    returnObj.values.push(newValue);
                }
                break;
            }
        }
        if(!validField){
            throw 'Invalid field '+field+' specified for object ' + params.object;
        }
    }
    catch(exception){
        returnObj.message = exception;
        returnObj.success = false;
    }
    return returnObj;
}

function getDependentValues(field, value){
    var returnObj = new returnObject();
    try{     
        var dependencyCode = new Array();          
        var getValues = getPicklistValues(field);        
        if(!getValues.success){
            throw getValues.message;
        }
        var picklistValues =  getValues.values;
        var getController = getControllerName(field);

        if(!getController.success){
            throw getController.message;
        }              
        var controller = getController.values;

        // sub function to do the validFor test
        function isDependentValue(index, validFor){
            var base64 = new sforce.Base64Binary("");
            var decoded = base64.decode(validFor);
            var bits = decoded.charCodeAt(index>>3);
            return ((bits & (0x80 >> (index%8))) != 0);
        }
        var controllerFields =getPicklistValues(controller);
        for(var item = 0; item < controllerFields.values.length; item++){
            if(controllerFields.values[item].value.toLowerCase() == value.toLowerCase()){
                for(var i = 0; i < picklistValues.length; i++){
                    if(isDependentValue(item, picklistValues[i].validFor)){
                        allUA.push(picklistValues[i].label);                                                     
                    }
                }
            }
        }
        /*alert(JSON.stringify(allUA));
        alert($.inArray('Create', allUA));
        alert($.inArray('Create123', allUA));*/
    }catch(exception){
        returnObj.success = false;
        returnObj.message = exception;
    }
    return returnObj;        
}

function returnObject(){
    this.success = true;
    this.message = 'Operation Ran Successfully';
    this.values = new Array();
}

// get the controller field name
function getControllerName(field){
    var returnObj = new returnObject();
    try{
        var isValid = false;
        for(var i = 0; i < describeResults.fields.length; i++){
            var fieldList = describeResults.fields[i];
            var fieldName = fieldList.name;
            if(fieldName.toLowerCase() == field.toLowerCase()){
                if(fieldList.controllerName == undefined){
                    throw 'Field has no controller';
                }else{
                    returnObj.values = fieldList.controllerName;
                    isValid = true;
                }
                break;
            }
        }
        if(!isValid){
            throw 'Invalid field '+field+' specified';
        }
    }catch(exception){
        returnObj.success = false;
        returnObj.message = exception;
    }
    return  returnObj;
}

$(document).ready(function() {
    
    var thisFieldId = "{!childNamespace}User_Actions__c";
    var currValues = getDependentValues(thisFieldId,  "{!childObject[childNamespace+'Current_State__c']}"); 
    resetButtons();
   
    
});

function resetButtons() {
    try {
   
       if($.inArray('Create', allUA) === -1) {
           $(".btnCreate").hide();
       }
       if($.inArray('Create & Close', allUA) === -1) {
           $(".btnCreateAndClose").hide();
       }
       if($.inArray('Send For Supervisory Resolution', allUA) === -1) {
           $(".btnSendForSupervisoryResolution").hide();
       }
       
   } catch (e) {
   }
}
</script>

<style>
    .messageblock{
        font-size:11px;
        border-radius: 4px;
        border-color: #c00;
        background-color: #ffc;
        border-style: solid;
        border-width: 1px;
        color: #000;
    }
</style> 

<script>
    function animateMessageBox(_element,interval) {
        $('#'+_element).hide(); 
        $('#'+_element).fadeIn('fast', function () { });
    }

    function closeMessage() {
        $('#messagebox').hide();   
    }

    function displayMessage(type,msg,interval) {
        var m = '<div class="alert ' + (type != "error" ? "alert-warning messageblock" : "alert-error messageblock") + ' alert-dismissable" style=" width:50%;margin: 0 auto;margin-top: 5px;">'+
                '<img src="'+ (type != "error" ? "/img/msg_icons/info24.png" : "/img/msg_icons/error24.png") +'" /> <button type="button" class="close" data-dismiss="alert" aria-hidden="true" onclick="closeMessage();">&times;</button> <strong><b>' + (type != "error" ? "Info" : "Error") + '!</b></strong> '+msg+
                '</div>';
        if(document.getElementById('messagebox') != null && document.getElementById('messagebox') != undefined) {
            document.getElementById('messagebox').innerHTML = m;
            animateMessageBox('messagebox',interval);
        }
        animateMessageBox('messagebox',interval);
    }
</script>

<apex:outputpanel id="messagepanel" style="Display:None">
    <apex:messages id="msg1"  style="Display:None" />
    <script>
        if(document.getElementById('{!$Component.msg1}') != null && document.getElementById('{!$Component.msg1}') != undefined) {
            var obj = document.getElementById('{!$Component.msg1}').getElementsByTagName('li');
            var msg='';
            for(var i=0;i<obj.length;i++) {
                if(i==0)    msg += '<br />';
                msg += obj[i].innerHTML + '<br />';
            }
            if(msg != '') {
                setTimeout(function() {displayMessage('error',msg,10000);},1000);
            }
        }
    </script>
</apex:outputpanel>

<script type="text/javascript">
    function startProcess(){
        document.getElementById("{!$Component.frm.loading}").style.display = 'block';       
        document.getElementById('filter').style.display = 'block';
    }

    function endProcess(){
        document.getElementById("{!$Component.frm.loading}").style.display = 'none';
        document.getElementById('filter').style.display = 'none'; 
    } 

    function saveClick(){
        saveFunction();
    }
    
    function onvaluechageaction(input){
        if(input != null && input != '' && input != ' ' ){
            var finalMap = {};
            for(var cnt = 0 ; cnt < fieldsArr.length ; cnt++ ) {
                 try { 
                     finalMap[fieldsArr[cnt]] = document.getElementById(fieldsToId[fieldsArr[cnt]]).value;
                 }catch(e) {
                 }
            }
            try { finalMap['{!prefix}'+'User_Actions__c'] = document.getElementById('j_id0:frm:jobTrackerPageBlock0:closurefieldsBlock:user_action').value; }
            catch(e) {  }
            var str = JSON.stringify(finalMap);
            processFV(str);
        }else{
            endProcess();
        }
    }

    function removeoption(){
        var optionslist=document.getElementsByTagName('option');
        for(var i=0;i<optionslist.length;i++) {
            var val = optionslist[i].value;
            if($.trim(val) == '__'){
                optionslist[i].parentNode.removeChild(optionslist[i]);
                break;
            }
        }
        endProcess();
    }
    

    function userActionChange(input){
        processFV(input.value);
    }

    /*function Change(thisComp,val){
        var list = JSON.parse('{!dependentFieldsList}');
        for(var i=0 ; i< list.size ; i++){

        }
    }*/
</script>

<script>
    function callExternalHookup(fieldAPIname,fieldid){
        //alert(fieldAPIname);
        //alert(fieldid);
        //alert('{!externalhookuppageurl}');
        //newwindow=window.open('/apex/ExternalHookupPage?openFrom='+fieldAPIname+'&fieldId='+fieldid+'&resourceURL='+'{!externalhookuppageurl}&isdtp=vw','ExternalHookup','height=400,width=800,left=100,top=100,scrollbars=yes,toolbar=no,status=no');
        //newwindow.focus();
        CreateAndOpenExtWindow('ExternalPopUp', 'Search' , '800' , '700' , '/apex/ExternalHookupPage?openFrom='+fieldAPIname+'&fieldId='+fieldid+'&resourceURL='+'{!externalhookuppageurl}&isdtp=vw','','','');
    }
    Ext.useShims = true;
    function CreateAndOpenExtWindow(windowId,windowTitle,width,height,src,parametersStr,fromWhere,action){
        var width = parseInt(width);
        var height = parseInt(height);
        var clientHeight = parseInt(window.parent.document.body.parentElement.clientHeight);
        if((clientHeight - height) < 30) {
           height = clientHeight - 100;
         }       
        if (!(parametersStr == '' || parametersStr == undefined || parametersStr == null)){
              src = src + parametersStr;
        }
        var panal1 = new Ext.Panel({
            id          :'panal1',
            collapsible :false,
            labelWidth  :80,
            width   :width+10,
            height  :height+10,
            bodyStyle:{"background-color":"white"}, 
            html    :'<iframe name="Panal" style="overflow:auto; width:'+width+'px; height:'+height+'px;" frameborder="0"  src="'+src+'">'
        });                        
        var win = new Ext.Window({
            id : windowId,
            title: windowTitle,
            closable:true,
            modal : true,
            width:width+35,
            height:height+58,
            //border:false,
            resizable: false,
            plain:true,
            shim: true,
            items:[panal1],
            listeners:{
                 'close':function(win){
                  }
            }
        });
        win.show(this);
    }
</script>


<div id="messagebox" style="z-index:10 !important;position:fixed !important;width:50% !important;top:30%;left:20%;" ></div>

<apex:form id="frm" rendered="{!form_render}">
 
    <div id="filter" style= "display:none;"></div> 
    <apex:image url="{!URLFOR($Resource.akritivtlm__TLMIMAGES,'img/loading.gif')}" id="loading" style="display:none;position:fixed;top:50%;left:50%;z-index:10;" />

    <apex:actionFunction action="{!saveFunction}" name="saveFunction" reRender="messagepanel,startflds1,frm" />

   <apex:actionFunction action="{!processFV}" name="processFV" rerender="startflds1" immediate="true" oncomplete="removeoption();resetLayout();endProcess();"><!-- removeoption(); -->
        <apex:param name="firstParam3" assignTo="{!jsonmap}" value="" />
    </apex:actionFunction>
   
    <apex:pageBlock title="{!$Label.Label_New_Tracker}" id="jobTrackerPageBlock0">
    
        <!--START : Below two blocks are kept to aid rendering of dependent picklist whose controlling fields are not visible/non editable-->
        <div style="display:none;visibility:hidden;">
            <apex:repeat id="repeat1011" value="{!standardEditableList}" var="stdRO">
                 <apex:inputHidden >
                     <apex:inputField rendered="{!IF(stdRO == childNamespace+'Current_State__c',true,false)}" value="{!childObject[stdRO]}" style="display:none;visibility:hidden;" >
                     </apex:inputField>
                 </apex:inputHidden>   
            </apex:repeat>
        </div>
        <!--END : Below two blocks are kept to aid rendering of dependent picklist whose controlling fields are not visible/non editable-->

        <apex:pageBlockButtons location="both" >
            <apex:commandButton styleClass="btnCreate" action="{!createCase}" value="Create" rerender="messagepanel,frm,closurefieldsBlock" oncomplete="resetLayout();resetButtons();" />
            <apex:commandButton styleClass="btnCreateAndClose" action="{!createNCloseCase}" value="Create & Close" rerender="messagepanel,frm,closurefieldsBlock" oncomplete="resetLayout();resetButtons();" />
            <!-- <apex:commandButton action="{!saveTracker}" value="{!$Label.Label_Submit}" rerender="messagepanel,jobTrackerPageBlock0" oncomplete="resetLayout();" /> -->
            <apex:commandButton styleClass="btnSendForApproval" action="{!SendforApproval}" value="Submit For Approval" rerender="messagepanel,jobTrackerPageBlock0" onclick="startProcess();" oncomplete="resetLayout();endProcess();resetButtons();" rendered="{!Submitforapprovalflag}" />
            <apex:commandButton styleClass="btnSendForSupervisoryResolution" action="{!SendForSupervisoryResolution}" value="Send For Supervisory Resolution" rerender="messagepanel,frm,startflds1" onclick="startProcess();" oncomplete="resetLayout();endProcess();resetButtons();" />
            <apex:commandButton action="{!cancel}" value="{!$Label.Label_Cancel}" />
        </apex:pageBlockButtons>

        <apex:pageBlockSection columns="1" title="{!$Label.Label_Case_Details}" id="fieldsPageBlock" collapsible="true" >
            <apex:repeat id="repeat101" value="{!standardEditableList}" var="stdRO">
                          <apex:inputField value="{!childObject[stdRO]}" rendered="{!IF(stdRO != childNamespace+'Current_State__c',true,false)}" />
                 <apex:outputField value="{!childObject[stdRO]}" rendered="{!IF(stdRO == childNamespace+'Current_State__c',true,false)}" />
            </apex:repeat>
        </apex:pageBlockSection>

        
        <apex:repeat id="repeat7" value="{!dependentFieldsList}" var="strt"> 
            <script>
                fieldsArr.push('{!strt.apiName}');
            </script>
        </apex:repeat> 
        
        <apex:actionRegion immediate="true">
            <apex:pageBlockSection columns="4" title="{!$Label.Label_Case_Creation_Fields}" id="startflds1" collapsible="true" >
                <apex:repeat id="repeat5" value="{!dependentFieldsList}" var="strt">                            
                    <!--  
                        <apex:inputField id="inputField" styleClass="{!strt.apiName}" value="{!childObject[strt.apiName]}" rendered="{!strt.inRender }" required="{!strt.inMandatory}" onchange="{!IF(  contains(onchangefieldlist, strt.apiName) ,'startProcess();onvaluechageaction(this.value);return false;','')}"/>
                    -->
                    <apex:inputField styleClass="{!strt.apiName}" id="inputField" value="{!childObject[strt.apiName]}" rendered="{!strt.inRender }" required="{!strt.inMandatory}" onchange="{!IF(contains(onchangefieldlist, strt.apiName) ,'startProcess();onvaluechageaction(this.value);return false;','')}">
                        <apex:outputpanel id="lookupiconid" rendered="{!IF(contains(externalHookupfieldlist, strt.apiName) ,true,false)}"><!-- &quot; -->
                                <!-- onClick="{!IF(contains(externalHookupfieldlist, strt.apiName) ,'callExternalHookup(apiName,apiId)','')}"  -->
                                <a href="javascript:void(0);"  id="a{!strt.apiName}" >
                                    <img title="{!$Label.Hookup_External_Page_URL}" onmouseover="this.className = 'lookupIconOn';this.className = 'lookupIconOn';" onmouseout="this.className = 'lookupIcon';this.className = 'lookupIcon';" onfocus="this.className = 'lookupIconOn';" onblur="this.className = 'lookupIcon';" class="lookupIcon" alt="Search" src="/s.gif" />
                                </a>
                                
                                <script>
                                    document.getElementById("a{!strt.apiName}").onclick = function() {
                                        callExternalHookup('{!strt.apiName}','{!$Component.inputField}');
                                    }
                                </script>
                            
                        </apex:outputpanel>
                    </apex:inputField>

                    <apex:outputpanel id="tempContainer">
                        <script>
                            fieldsToId['{!strt.apiName}'] = '{!$Component.inputField}';
                            allIds.push('{!$Component.tempContainer}');
                        </script>
                    </apex:outputpanel>
                    <apex:outputField value="{!childObject[strt.apiName]}" rendered="{!strt.ouRender}" />    
                </apex:repeat>

                <apex:repeat id="repeat6" value="{!ManualCaseList}" var="strt">                            
                   <apex:inputField value="{!parentObject[strt]}" rendered="true" required="{!strt.required}" />
                   <apex:outputpanel id="tempContainer1">
                        <script>
                            allIds.push('{!$Component.tempContainer1}');
                        </script>
                    </apex:outputpanel>
               </apex:repeat>
            </apex:pageBlockSection>
        </apex:actionRegion>
        <apex:pageBlockSection columns="1" title="{!$Label.Label_Closure_Fields}" id="closurefieldsBlock" collapsible="true" >
            
            <apex:inputTextarea id="comments" cols="50" rows="5" value="{!childObject['Comments__c']}" rendered="{!IF(commentVF.inRender && NOT(longComments),true,false)}" required="false" style="width:200px;" />
            <apex:outputfield id="comments1" value="{!childObject['Comments__c']}" rendered="{!IF(commentVF.ouRender && NOT(longComments),true,false)}" />
            
            <apex:inputTextarea id="commentsnew" cols="50" rows="5" value="{!childObject['Long_Comments__c']}" rendered="{!IF(commentVF.inRender && longComments,true,false)}" required="false" style="width:200px;" />
            <apex:outputfield id="comments1new" value="{!childObject['Long_Comments__c']}" rendered="{!IF(commentVF.ouRender && longComments,true,false)}" />
            
            <!-- 
            <apex:inputfield id="user_action" value="{!childObject[childNamespace+'User_Actions__c']}" onchange="startProcess();onvaluechageaction(this.value);" required="true" rendered="{!userAct.inRender}" />
            <apex:outputfield id="user_action1" value="{!childObject[childNamespace+'User_Actions__c']}" rendered="{!userAct.ouRender}" />
             -->
        </apex:pageBlockSection>
    </apex:pageblock>
    </apex:form>

<!-- For remove default date selection in date time -->
<style>
.dateFormat {
    display : none !important;
}
/*.detailList input,select {
    width : 170px !important;
}
.dateBar select{
    width: auto !important;
}*/
</style>
<!-- For remove default date selection in date time -->
<script>
    function resetLayout() {
        for( var i = 0; i < allIds.length; i++ ) {
            try {
                var ele = document.getElementById(allIds[i]);
                ele.parentNode.parentNode.removeChild(ele.parentNode);
            } catch (e) {
            }
        }
        allIds = [];
    }
    resetLayout();
</script>
</apex:page>